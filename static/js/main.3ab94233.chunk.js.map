{"version":3,"sources":["Components/InfoDisplay/InfoDisplay.tsx","Components/Map/Map.tsx","images/icon-arrow.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InfoDisplay","props","className","infoDescription","infoText","SetViewOnClick","map","useMap","setView","coords","getZoom","animate","Map","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","App","useState","isLoading","setIsLoading","location","setLocation","infoData","setInfoData","infoDescriptions","setCoords","errorMessage","setErrorMessage","useEffect","a","publicIp","v4","catch","err","console","log","clientIP","getIP","then","updateInfoData","route","fetch","res","json","data","isp","lat","lng","ip","city","region","postalCode","timezone","placeholder","onChange","event","value","currentTarget","type","onClick","preventDefault","domainRegex","RegExp","ipv4Regex","ipv6Regex","test","src","submitArrow","alt","CircularProgress","item","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ab94233.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoDisplay.css';\n\nexport interface Props {\n    infoDescription: String;\n    infoText: String\n}\n\nconst  InfoDisplay: React.FC<Props> = (props) => {\n    return (\n        <div className=\"info-item-holder\">\n            <div className=\"info-item-description\">{props.infoDescription}</div>\n            <div className=\"info-item-text\">{props.infoText}</div>\n        </div>\n    )\n}\n\nexport default InfoDisplay\n","import { LatLngExpression } from 'leaflet';\nimport React from 'react'\nimport {MapContainer, TileLayer, Marker, useMap} from 'react-leaflet';\n\nexport interface Props {\n    coords: LatLngExpression\n}\n\nconst SetViewOnClick: React.FC<Props> = (props) => {\n    const map = useMap();\n    map.setView(props.coords, map.getZoom(), {\n        animate: true\n    });\n  \n    return null;\n}\n\nconst  Map: React.FC<Props> = (props) => {\n    return (\n        <MapContainer center={props.coords} zoom={10} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\n            <Marker position={props.coords} />\n            <SetViewOnClick coords={props.coords} />\n        </MapContainer>\n    )\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport InfoDisplay from './Components/InfoDisplay/InfoDisplay';\nimport Map from './Components/Map/Map';\nimport { CircularProgress } from '@material-ui/core';\nimport { LatLngExpression } from 'leaflet';\nimport publicIp from 'public-ip';\nimport submitArrow from './images/icon-arrow.svg';\n\nconst App = () => {\n    const [isLoading, setIsLoading] = useState < Boolean > (true)\n    const [location, setLocation] = useState('')\n    const [infoData, setInfoData] = useState < String[] > ([])\n    const infoDescriptions = [\"IP ADDRESS\", \"LOCATION\", \"TIMEZONE\", \"ISP\"]\n    const [coords, setCoords] = useState < LatLngExpression > ([0,0])\n\tconst [errorMessage, setErrorMessage] = useState('') \n\n\tuseEffect(() => {\n\t\tconst getIP = async () => {\n\t\t\tconst clientIP: string = await publicIp.v4()\n\t\t\t\t.catch((err) => {console.log(err)}) || ''\n\t\t\tsetLocation(clientIP)\n\t\t\treturn clientIP\n\t\t}\n\t\tgetIP().then((clientIP) => updateInfoData(`ipAddress=${clientIP}`))\n\t},[])\n\n\tconst onButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tevent.preventDefault()\n\t\tsetIsLoading(true)\n\t\t//ipv4 and ipv6 from https://ihateregex.io/expr/ip/\n\t\tconst domainRegex = new RegExp('^(?!-)[A-Za-z0-9-]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\\\.[A-Za-z]{2,6}$')\n\t\tconst ipv4Regex = new RegExp('(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}')\n\t\tconst ipv6Regex = new RegExp('(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])) ')\n\t\tif(domainRegex.test(location)) return updateInfoData(`domain=${location}`)\n\t\tif(ipv4Regex.test(location)) return updateInfoData(`ipAddress=${location}`)\n\t\tif(ipv6Regex.test(location)) return updateInfoData(`ipAddress=${location}`)\n\t\tsetErrorMessage('Error: Invalid IP / Domain')\n\t\tsetIsLoading(false)\n\t}\n\n\tconst onChange = (event: React.FormEvent<HTMLInputElement>) =>{\n\t\tconst value = event.currentTarget.value;\n\t\tsetLocation(value);\n\t}\n\n\tconst updateInfoData = (route: string) => {\n\t\tsetErrorMessage('')\n\t\t//Please do not steal my api key. I can't hide the api key while hosting this site on Github Pages.\n\t\tfetch(`https://geo.ipify.org/api/v1?apiKey=at_zMSdutGCIqJXGOHxSYRDPpstGMweL&${route}`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => {\n\t\t\t\tif(data.isp === '') setErrorMessage('Not a valid IP / Domain, please try again.')\n\t\t\t\tconsole.log(data)\n\t\t\t\tsetCoords([data.location.lat, data.location.lng])\n\t\t\t\tsetInfoData([data.ip, `${data.location.city}, ${data.location.region}\n\t\t\t\t${data.location.postalCode}`, `UTC ${data.location.timezone}`, data.isp])\n\t\t\t}).then(() => setIsLoading(false))\n\t\t\t.catch((err) => setErrorMessage('There was an error contacting the API, please check your input or contact the site admin'))\n\t}\n\n    return (\n        <div className=\"App\">\n            <div className=\"heading-holder\">\n                <p className=\"app-title\">IP Address Tracker</p>\n\t\t\t\t<div className=\"input-holder\">\n\t\t\t\t\t<input \n\t\t\t\t\t\tplaceholder={'Search for any IP address or domain'}\n\t\t\t\t\t\tonChange={onChange} />\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tonClick={onButtonClick}> <img src={submitArrow} alt=\"submit\" /></button>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"error\">{errorMessage}</p>\n            </div>\n            <div className=\"info-absolute\">\n                <div className=\"info-holder\">\n\t\t\t\t \t{isLoading && <div className=\"spinner\"><CircularProgress/></div>}\n                    {!isLoading && infoData.map((item, index) => (\n\t\t\t\t\t\t<InfoDisplay\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tinfoDescription={infoDescriptions[index]}\n\t\t\t\t\t\t\tinfoText={item}/>))}\n                </div>\n            </div>\n            <div className=\"leaflet-map\">\n                <Map \n\t\t\t\t\tcoords= {coords}\n\t\t\t\t/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}